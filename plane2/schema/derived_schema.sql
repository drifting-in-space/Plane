-- *****************************************************************
-- This file is auto-generated by prepare.sh from migrations/*.sql.
-- Use it as a reference, but do not modify it directly.
-- *****************************************************************


--
-- PostgreSQL database dump
--

-- Dumped from database version 16.0 (Debian 16.0-1.pgdg120+1)
-- Dumped by pg_dump version 16.0 (Debian 16.0-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: _sqlx_migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public._sqlx_migrations (
    version bigint NOT NULL,
    description text NOT NULL,
    installed_on timestamp with time zone DEFAULT now() NOT NULL,
    success boolean NOT NULL,
    checksum bytea NOT NULL,
    execution_time bigint NOT NULL
);


ALTER TABLE public._sqlx_migrations OWNER TO postgres;

--
-- Name: acme_txt_entries; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.acme_txt_entries (
    cluster character varying(255) NOT NULL,
    leased_at timestamp with time zone DEFAULT now() NOT NULL,
    leased_by integer NOT NULL,
    txt_value character varying(255)
);


ALTER TABLE public.acme_txt_entries OWNER TO postgres;

--
-- Name: backend; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.backend (
    id character varying(255) NOT NULL,
    cluster character varying(255) NOT NULL,
    last_status character varying(255) NOT NULL,
    last_status_time timestamp with time zone NOT NULL,
    cluster_address character varying(255),
    exit_code integer,
    drone_id integer NOT NULL,
    expiration_time timestamp with time zone,
    last_keepalive timestamp with time zone NOT NULL,
    allowed_idle_seconds integer
);


ALTER TABLE public.backend OWNER TO postgres;

--
-- Name: COLUMN backend.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.id IS 'The unique id of the backend.';


--
-- Name: COLUMN backend.cluster; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.cluster IS 'The cluster the backend belongs to.';


--
-- Name: COLUMN backend.last_status; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.last_status IS 'The last status received from the backend.';


--
-- Name: COLUMN backend.last_status_time; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.last_status_time IS 'The time the last status was received from the backend.';


--
-- Name: COLUMN backend.cluster_address; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.cluster_address IS 'The address (IP:PORT) of the backend within the cluster.';


--
-- Name: COLUMN backend.drone_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.drone_id IS 'The drone the backend is running on.';


--
-- Name: COLUMN backend.expiration_time; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.expiration_time IS 'A hard deadline after which the controller will initiate a graceful termination of the backend.';


--
-- Name: COLUMN backend.last_keepalive; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.last_keepalive IS 'The last time a proxy sent a keepalive for this backend.';


--
-- Name: COLUMN backend.allowed_idle_seconds; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.backend.allowed_idle_seconds IS 'The number of seconds the backend is allowed to be idle (no inbound connections alive) before it is terminated.';


--
-- Name: backend_action; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.backend_action (
    id character varying(255) NOT NULL,
    drone_id integer NOT NULL,
    backend_id character varying(255),
    action jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    acked_at timestamp with time zone
);


ALTER TABLE public.backend_action OWNER TO postgres;

--
-- Name: backend_key; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.backend_key (
    id integer NOT NULL,
    cluster character varying(255) NOT NULL,
    namespace character varying(255) NOT NULL,
    key_name character varying(255) NOT NULL,
    tag character varying(255) NOT NULL,
    last_renewed timestamp with time zone NOT NULL,
    backend_id character varying(255) NOT NULL
);


ALTER TABLE public.backend_key OWNER TO postgres;

--
-- Name: backend_key_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.backend_key_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_key_id_seq OWNER TO postgres;

--
-- Name: backend_key_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.backend_key_id_seq OWNED BY public.backend_key.id;


--
-- Name: backend_status; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.backend_status (
    id integer NOT NULL,
    backend_id character varying(255) NOT NULL,
    status character varying(255) NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.backend_status OWNER TO postgres;

--
-- Name: backend_status_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.backend_status_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.backend_status_id_seq OWNER TO postgres;

--
-- Name: backend_status_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.backend_status_id_seq OWNED BY public.backend_status.id;


--
-- Name: controller; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.controller (
    id character varying(255) NOT NULL,
    first_seen timestamp with time zone DEFAULT now() NOT NULL,
    last_heartbeat timestamp with time zone NOT NULL,
    is_online boolean NOT NULL,
    plane_version character varying(255) NOT NULL,
    plane_hash character varying(255) NOT NULL,
    ip inet NOT NULL
);


ALTER TABLE public.controller OWNER TO postgres;

--
-- Name: drone; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.drone (
    id integer NOT NULL,
    ready boolean NOT NULL,
    draining boolean DEFAULT false NOT NULL,
    last_heartbeat timestamp with time zone,
    last_local_epoch_millis bigint
);


ALTER TABLE public.drone OWNER TO postgres;

--
-- Name: COLUMN drone.id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.drone.id IS 'The unique id of the drone (shared with the node associated with this drone).';


--
-- Name: COLUMN drone.ready; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.drone.ready IS 'Whether the drone is ready to accept backends.';


--
-- Name: COLUMN drone.draining; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.drone.draining IS 'Whether the drone is draining. If true, this drone will not be considered by the scheduler.';


--
-- Name: COLUMN drone.last_heartbeat; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.drone.last_heartbeat IS 'The last time local_epoch_millis was received from the drone.';


--
-- Name: COLUMN drone.last_local_epoch_millis; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.drone.last_local_epoch_millis IS 'The last reported milliseconds since epoch from the drone, used to assign initial key leases when spawning.';


--
-- Name: drone_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.drone_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.drone_id_seq OWNER TO postgres;

--
-- Name: drone_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.drone_id_seq OWNED BY public.drone.id;


--
-- Name: event; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.event (
    id integer NOT NULL,
    kind character varying(255) NOT NULL,
    key character varying(255),
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    data jsonb NOT NULL
);


ALTER TABLE public.event OWNER TO postgres;

--
-- Name: event_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.event_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.event_id_seq OWNER TO postgres;

--
-- Name: event_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.event_id_seq OWNED BY public.event.id;


--
-- Name: node; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.node (
    id integer NOT NULL,
    kind character varying(255) NOT NULL,
    name character varying(255) NOT NULL,
    cluster character varying(255),
    plane_version character varying(255) NOT NULL,
    plane_hash character varying(255) NOT NULL,
    controller character varying(255),
    ip inet NOT NULL
);


ALTER TABLE public.node OWNER TO postgres;

--
-- Name: COLUMN node.kind; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.kind IS 'A string representing the kind of node this is (serialized types::NodeKind).';


--
-- Name: COLUMN node.name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.name IS 'A string name provided by the node, unique within a cluster.';


--
-- Name: COLUMN node.cluster; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.cluster IS 'The cluster the node is registered with.';


--
-- Name: COLUMN node.plane_version; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.plane_version IS 'The version of the plane running on the node.';


--
-- Name: COLUMN node.plane_hash; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.plane_hash IS 'The git hash of the plane version running on the node.';


--
-- Name: COLUMN node.controller; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.controller IS 'The controller the node is registered with (null if the node is offline).';


--
-- Name: COLUMN node.ip; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.node.ip IS 'The last-seen IP of the node relative to the controller. This is just for reference; drones self-report their IP for use by proxies.';


--
-- Name: node_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.node_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.node_id_seq OWNER TO postgres;

--
-- Name: node_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.node_id_seq OWNED BY public.node.id;


--
-- Name: token; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.token (
    token character varying(255) NOT NULL,
    backend_id character varying(255) NOT NULL,
    expiration_time timestamp with time zone NOT NULL,
    username character varying(255),
    auth jsonb NOT NULL,
    secret_token character varying(255) NOT NULL
);


ALTER TABLE public.token OWNER TO postgres;

--
-- Name: backend_key id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_key ALTER COLUMN id SET DEFAULT nextval('public.backend_key_id_seq'::regclass);


--
-- Name: backend_status id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_status ALTER COLUMN id SET DEFAULT nextval('public.backend_status_id_seq'::regclass);


--
-- Name: drone id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.drone ALTER COLUMN id SET DEFAULT nextval('public.drone_id_seq'::regclass);


--
-- Name: event id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event ALTER COLUMN id SET DEFAULT nextval('public.event_id_seq'::regclass);


--
-- Name: node id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.node ALTER COLUMN id SET DEFAULT nextval('public.node_id_seq'::regclass);


--
-- Name: _sqlx_migrations _sqlx_migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public._sqlx_migrations
    ADD CONSTRAINT _sqlx_migrations_pkey PRIMARY KEY (version);


--
-- Name: acme_txt_entries acme_txt_entries_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.acme_txt_entries
    ADD CONSTRAINT acme_txt_entries_pkey PRIMARY KEY (cluster);


--
-- Name: backend_action backend_action_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_action
    ADD CONSTRAINT backend_action_pkey PRIMARY KEY (id);


--
-- Name: backend_key backend_key_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_key
    ADD CONSTRAINT backend_key_pkey PRIMARY KEY (id);


--
-- Name: backend backend_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend
    ADD CONSTRAINT backend_pkey PRIMARY KEY (id);


--
-- Name: backend_status backend_status_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_status
    ADD CONSTRAINT backend_status_pkey PRIMARY KEY (id);


--
-- Name: controller controller_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.controller
    ADD CONSTRAINT controller_pkey PRIMARY KEY (id);


--
-- Name: drone drone_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.drone
    ADD CONSTRAINT drone_pkey PRIMARY KEY (id);


--
-- Name: event event_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.event
    ADD CONSTRAINT event_pkey PRIMARY KEY (id);


--
-- Name: node node_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.node
    ADD CONSTRAINT node_pkey PRIMARY KEY (id);


--
-- Name: token token_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.token
    ADD CONSTRAINT token_pkey PRIMARY KEY (token);


--
-- Name: idx_backend_action_backend; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_backend_action_backend ON public.backend_action USING btree (backend_id);


--
-- Name: idx_backend_action_pending; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_backend_action_pending ON public.backend_action USING btree (drone_id) WHERE (acked_at IS NULL);


--
-- Name: idx_backend_drone_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_backend_drone_id ON public.backend USING btree (cluster, drone_id) WHERE ((last_status)::text <> 'Terminated'::text);


--
-- Name: INDEX idx_backend_drone_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_backend_drone_id IS 'An index for running/starting backends on a particular drone.';


--
-- Name: idx_backend_status_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_backend_status_created_at ON public.backend_status USING btree (backend_id, created_at);


--
-- Name: idx_cluster_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_cluster_name ON public.node USING btree (cluster, name);


--
-- Name: idx_cluster_namespace_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE UNIQUE INDEX idx_cluster_namespace_name ON public.backend_key USING btree (cluster, namespace, key_name);


--
-- Name: idx_event_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_event_created_at ON public.event USING btree (created_at);


--
-- Name: acme_txt_entries acme_txt_entries_leased_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.acme_txt_entries
    ADD CONSTRAINT acme_txt_entries_leased_by_fkey FOREIGN KEY (leased_by) REFERENCES public.node(id);


--
-- Name: backend_action backend_action_backend_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_action
    ADD CONSTRAINT backend_action_backend_id_fkey FOREIGN KEY (backend_id) REFERENCES public.backend(id);


--
-- Name: backend_action backend_action_drone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_action
    ADD CONSTRAINT backend_action_drone_id_fkey FOREIGN KEY (drone_id) REFERENCES public.drone(id);


--
-- Name: backend backend_drone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend
    ADD CONSTRAINT backend_drone_id_fkey FOREIGN KEY (drone_id) REFERENCES public.drone(id);


--
-- Name: backend_key backend_key_backend_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_key
    ADD CONSTRAINT backend_key_backend_id_fkey FOREIGN KEY (backend_id) REFERENCES public.backend(id);


--
-- Name: backend_status backend_status_backend_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.backend_status
    ADD CONSTRAINT backend_status_backend_id_fkey FOREIGN KEY (backend_id) REFERENCES public.backend(id);


--
-- Name: drone drone_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.drone
    ADD CONSTRAINT drone_id_fkey FOREIGN KEY (id) REFERENCES public.node(id);


--
-- Name: node node_controller_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.node
    ADD CONSTRAINT node_controller_fkey FOREIGN KEY (controller) REFERENCES public.controller(id);


--
-- Name: token token_backend_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.token
    ADD CONSTRAINT token_backend_id_fkey FOREIGN KEY (backend_id) REFERENCES public.backend(id);


--
-- PostgreSQL database dump complete
--

